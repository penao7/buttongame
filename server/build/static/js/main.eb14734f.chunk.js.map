{"version":3,"sources":["Button.js","App.js","index.js"],"names":["Button","p","onClick","play","className","ButtonGame","useState","prize","setPrize","status","setStatus","counter","winCounter","points","gameData","setGameData","socket","setSocket","progress","setProgress","useEffect","openSocket","on","handleData","data","checkIfPlayerWon","checkPoints","emit","CSSTransition","in","timeout","classNames","ReactDOM","render","document","getElementById"],"mappings":"sTAYeA,MATf,SAAiBC,GAEf,OACE,6BACE,4BAAQC,QAASD,EAAEE,KAAMC,UAAU,UAAnC,WCmGSC,MApGf,WAAsB,MAIMC,mBAAS,IAJf,mBAIbC,EAJa,KAINC,EAJM,OAKQF,oBAAS,GALjB,mBAKbG,EALa,KAKLC,EALK,OAMYJ,mBAAS,CAACK,QAAS,EAAGC,WAAY,EAAGC,OAAQ,IANzD,mBAMbC,EANa,KAMHC,EANG,OAOQT,qBAPR,mBAObU,EAPa,KAOLC,EAPK,OAWYX,oBAAS,GAXrB,mBAWbY,EAXa,KAWHC,EAXG,KAepBC,qBAAU,WACR,IAAMJ,EAASK,IAAW,kBAC1BL,EAAOM,GAAG,SAAUC,GACpBN,EAAUD,KACT,IAIH,IAAMO,EAAa,SAACC,GAClBT,EAAYS,GACZC,EAAiBD,EAAKb,SACtBe,EAAYF,EAAKX,QACjBM,GAAY,IAKRM,EAAmB,SAACd,GACxB,GAAGA,EAAU,EACX,GAAGA,EAAU,MAAQ,EACnBH,EAAS,iCACJ,GAAIG,EAAU,MAAQ,EAC3BH,EAAS,+BACJ,IAAIG,EAAU,KAAO,EAG5B,OAFEH,EAAS,4BAQTkB,EAAc,SAACb,GACL,IAAXA,GACDH,GAAWD,IAsBf,OACEA,EAEA,yBAAKL,UAAU,OACb,6BACA,kBAAC,EAAD,CAAYD,KArBH,WACXa,EAAOW,KAAK,SACZnB,EAAS,IACTW,GAAY,MAmBR,2BAAOf,UAAU,gCAAgCU,EAASF,YAC1D,2BAAOR,UAAU,QAAjB,yBACA,2BAAOA,UAAU,QAAjB,eACA,2BAAOA,UAAWU,EAASD,QAAU,EAAI,uBAAyBC,EAASD,QAAU,GAAK,kBAAoB,qBAAsBC,EAASD,QAC7I,kBAACe,EAAA,EAAD,CACEC,GAAIX,EACJY,QAAS,IACTC,WAAW,SAEPxB,EAEA,2BAAOH,UAAU,6BAA6BG,GAD9C,2BAAOH,UAAU,6BAAjB,OAGN,8BAGJ,yBAAKA,UAAU,OACb,sDACA,4BAAQF,QAhCI,WACdc,EAAOW,KAAK,SACZjB,GAAWD,KA8BT,cChGNuB,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,W","file":"static/js/main.eb14734f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nfunction Button (p) {\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={p.play} className=\"button\">Click</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;","import React, { useState, useEffect } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport openSocket from 'socket.io-client';\nimport './App.css';\nimport PlayButton from './Button';\n\nfunction ButtonGame() {\n\n  // Initialize states\n\n  const [prize, setPrize] = useState('');\n  const [status, setStatus] = useState(true);\n  const [gameData, setGameData] = useState({counter: 0, winCounter: 0, points: 0});\n  const [socket, setSocket] = useState();\n\n  // Transitiontest\n\n  const [progress, setProgress] = useState(false);\n\n  // Initialize socket, get game information from the server and set socket to the state\n\n  useEffect(() => {\n    const socket = openSocket('localhost:5000');\n    socket.on('result', handleData);\n    setSocket(socket);\n  }, []);\n\n  // Handle incoming game information\n\n  const handleData = (data) => {\n    setGameData(data);\n    checkIfPlayerWon(data.counter);\n    checkPoints(data.points);\n    setProgress(false);\n  };\n\n  // Check if player has won\n\n  const checkIfPlayerWon = (counter) => {\n    if(counter > 0) {\n      if(counter % 500 === 0) {\n        setPrize(\"You have won 250 points!\")\n      } else if (counter % 100 === 0) {\n        setPrize(\"You have won 40 points!\")\n      } else if (counter % 10 === 0) {\n        setPrize(\"You have won 5 points!\")\n    } else {\n      return;\n    }};\n  };\n\n  // Check if player points have ran out\n\n  const checkPoints = (points) => {\n    if(points === 0 ) {\n      setStatus(!status)\n    };\n  };\n\n  // Initialize play\n\n  const play = () => {\n    socket.emit('click');\n    setPrize('');\n    setProgress(true);\n  };\n\n  // Option for restarting the game if points have ran out \n\n  const newGame = () => {\n    socket.emit('reset');\n    setStatus(!status);\n  };\n\n\n  // UI\n\n  return (\n    status\n    ?\n    <div className=\"App\">\n      <br/>\n      <PlayButton play={play}/>\n        <label className=\"text points-value-wincounter\">{gameData.winCounter}</label>\n        <label className=\"text\">Clicks for next prize</label>\n        <label className=\"text\">Clicks left</label>\n        <label className={gameData.points <= 5 ? \"testi points-under-5\" : gameData.points <= 10 ? \"points-under-10\" : \"points-value-text\"}>{gameData.points}</label>\n        <CSSTransition \n          in={progress}\n          timeout={2000} \n          classNames=\"slide\"\n          >\n            {!prize \n            ? <label className=\"animating point-decrement\">-1</label>\n            : <label className=\"animating point-increment\">{prize}</label>}\n        </CSSTransition>\n        <br/>\n    </div>\n    :\n    <div className=\"App\">\n      <h1>You ran out of points!</h1>\n      <button onClick={newGame}>New game</button>\n    </div>\n  );\n};\n\nexport default ButtonGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ButtonGame from './App';\n\nReactDOM.render(<ButtonGame />, document.getElementById('root'));\n\n"],"sourceRoot":""}