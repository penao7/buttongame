{"version":3,"sources":["Buttons/PlayButton.js","Buttons/ResetButton.js","App.js","index.js"],"names":["PlayButton","p","onClick","play","className","ResetButton","reset","ButtonGame","useState","prize","setPrize","status","setStatus","counter","winCounter","points","gameData","setGameData","socket","setSocket","transition","setTransition","useEffect","openSocket","on","handleData","data","checkPoints","checkIfPlayerWon","emit","CSSTransition","in","timeout","classNames","ReactDOM","render","document","getElementById"],"mappings":"2RAYeA,MATf,SAAqBC,GAEnB,OACE,6BACE,4BAAQC,QAASD,EAAEE,KAAMC,UAAU,UAAnC,WCISC,MATf,SAAsBJ,GAEpB,OACE,6BACE,4BAAQC,QAASD,EAAEK,MAAOF,UAAU,UAApC,cCmGSG,MAnGf,WAAsB,MAIMC,mBAAS,IAJf,mBAIbC,EAJa,KAINC,EAJM,OAKQF,oBAAS,GALjB,mBAKbG,EALa,KAKLC,EALK,OAMYJ,mBAAS,CAACK,QAAS,EAAGC,WAAY,EAAGC,OAAQ,IANzD,mBAMbC,EANa,KAMHC,EANG,OAOQT,qBAPR,mBAObU,EAPa,KAOLC,EAPK,OAQgBX,oBAAS,GARzB,mBAQbY,EARa,KAQDC,EARC,KAYpBC,qBAAU,WACR,IAAMJ,EAASK,IAAW,yBAC1BL,EAAOM,GAAG,SAAUC,GACpBN,EAAUD,KACT,IAIH,IAAMO,EAAa,SAACC,GAClBC,EAAYD,EAAKX,QACjBa,EAAiBF,EAAKb,SACtBI,EAAYS,GACZL,GAAc,IAKVO,EAAmB,SAACf,GACxB,GAAGA,EAAU,EACX,GAAGA,EAAU,MAAQ,EACnBH,EAAS,iCACJ,GAAIG,EAAU,MAAQ,EAC3BH,EAAS,+BACJ,IAAIG,EAAU,KAAO,EAG5B,OAFEH,EAAS,4BAQTiB,EAAc,SAACZ,GACL,IAAXA,GACDH,GAAWD,IAsBf,OACEA,EAEA,yBAAKP,UAAU,OACb,6BACA,kBAAC,EAAD,CAAYD,KArBH,WACXe,EAAOW,KAAK,SACZnB,EAAS,IACTW,GAAc,MAmBV,2BAAOjB,UAAU,gCAAgCY,EAASF,YAC1D,2BAAOV,UAAU,QAAjB,yBACA,2BAAOA,UAAU,QAAjB,eACA,2BAAOA,UAAWY,EAASD,QAAU,EAAI,uBAAyBC,EAASD,QAAU,GAAK,kBAAoB,qBAAsBC,EAASD,QAC7I,kBAACe,EAAA,EAAD,CACEC,GAAIX,EACJY,QAAS,IACTC,WAAW,SAGNxB,EAEC,2BAAOL,UAAU,6BAA6BK,GAD9C,2BAAOL,UAAU,6BAAjB,OAIR,8BAGJ,yBAAKA,UAAU,OACb,2DACA,kBAAC,EAAD,CAAaE,MAlCD,WACdY,EAAOW,KAAK,SACZjB,GAAWD,QC/DfuB,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,W","file":"static/js/main.2a00dbc4.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Button.css';\r\n\r\nfunction PlayButton (p) {\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={p.play} className=\"button\">Click</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayButton;","import React from 'react';\r\n\r\nfunction ResetButton (p) {\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={p.reset} className=\"button\">New Game</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetButton;","import React, { useState, useEffect } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport openSocket from 'socket.io-client';\nimport PlayButton from './Buttons/PlayButton';\nimport ResetButton from './Buttons/ResetButton';\n\nfunction ButtonGame() {\n\n  // Initialize states\n\n  const [prize, setPrize] = useState('');\n  const [status, setStatus] = useState(true);\n  const [gameData, setGameData] = useState({counter: 0, winCounter: 0, points: 0});\n  const [socket, setSocket] = useState();\n  const [transition, setTransition] = useState(false);\n\n  // Initialize socket, get game information from the server and set socket to the state\n\n  useEffect(() => {\n    const socket = openSocket('http://localhost:5000');\n    socket.on('result', handleData);\n    setSocket(socket);\n  }, []);\n\n  // Check points and win condition, handle incoming game information and reset transition\n\n  const handleData = (data) => {\n    checkPoints(data.points);\n    checkIfPlayerWon(data.counter);\n    setGameData(data);\n    setTransition(false);\n  };\n\n  // Check if player has won\n\n  const checkIfPlayerWon = (counter) => {\n    if(counter > 0) {\n      if(counter % 500 === 0) {\n        setPrize(\"You have won 250 points!\")\n      } else if (counter % 100 === 0) {\n        setPrize(\"You have won 40 points!\")\n      } else if (counter % 10 === 0) {\n        setPrize(\"You have won 5 points!\")\n    } else {\n      return;\n    }};\n  };\n\n  // Check if player's points have ran out\n\n  const checkPoints = (points) => {\n    if(points === 0 ) {\n      setStatus(!status)\n    };\n  };\n\n  // Initialize play\n\n  const play = () => {\n    socket.emit('click');\n    setPrize('');\n    setTransition(true);\n  };\n\n  // Option for restarting the game if points have ran out \n\n  const newGame = () => {\n    socket.emit('reset');\n    setStatus(!status);\n  };\n\n\n  // User Interface\n\n  return (\n    status\n    ?\n    <div className=\"App\">\n      <br/>\n      <PlayButton play={play}/>\n        <label className=\"text points-value-wincounter\">{gameData.winCounter}</label>\n        <label className=\"text\">Clicks for next prize</label>\n        <label className=\"text\">Clicks left</label>\n        <label className={gameData.points <= 5 ? \"testi points-under-5\" : gameData.points <= 10 ? \"points-under-10\" : \"points-value-text\"}>{gameData.points}</label>\n        <CSSTransition \n          in={transition}\n          timeout={2000} \n          classNames=\"slide\"\n          >\n            {\n              !prize \n              ? <label className=\"animating point-decrement\">-1</label>\n              : <label className=\"animating point-increment\">{prize}</label>\n            }\n        </CSSTransition>\n        <br/>\n    </div>\n    :\n    <div className=\"App\">\n      <h1>You have ran out of points!</h1>\n      <ResetButton reset={newGame}/>\n    </div>\n  );\n};\n\nexport default ButtonGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ButtonGame from './App';\n\nReactDOM.render(<ButtonGame />, document.getElementById('root'));\n\n"],"sourceRoot":""}